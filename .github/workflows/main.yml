name: Container Process with Artifacts

on:
  workflow_dispatch:

jobs:
  container-process:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    # 步骤 1：检出主仓库到默认位置
    - name: Checkout main repo
      uses: actions/checkout@v4

    # 步骤 2：检出另一个仓库到 tmp_data 目录
    - name: Checkout secondary repo
      uses: actions/checkout@v4
      with:
        repository: zerofo/zerofo.github.io  # 目标仓库的完整名称
        path: tmp              # 指定检出到 tmp_data 目录
      # token: ${{ secrets.ACCESS_TOKEN }}  # 需要仓库访问权限的 token
    - name: zip download
      id: getzip
      run: |
        echo "zipurl=''" >> $GITHUB_OUTPUT
        # echo "zipurl=http://github.com/zerofo/psesp_action/releases/test/test.zip" >> $GITHUB_OUTPUT
    - name: getindex
      id: indexPath
      run: echo "indexPath=''" >> $GITHUB_OUTPUT
      #run: echo "indexPath=document/en/ps5" >> $GITHUB_OUTPUT

    # 步骤 3：创建必要目录结构
    - name: Prepare directories
      run: |
        mkdir -p output 
        chmod -R a+rwx output
        if [[ ${{ steps.getzip.outputs.zipurl }} != "" ]]; then
            wget ${{ steps.getzip.outputs.zipurl }} -O source.zip
            unzip source.zip -d tmpzip;
        fi
    # 步骤 4：运行容器处理数据
    - name: Run container process
      run: |
        docker pull zerofo/builder_esp:web_p
        if [[ -d tmpzip ]];then
          mv tmpzip tmp_data
        elif [[ ${{ steps.indexPath.outputs.indexPath }} != "" ]]; then
          mv tmp/${{ steps.indexPath.outputs.indexPath }} tmp_data
        else
          mv tmp tmp_data
        fi
        docker run -i --name psesp_action -v ${{ github.workspace }}/output:/output -v ${{ github.workspace }}/config.txt:/config.txt -v ${{ github.workspace }}/tmp_data/:/Srchost zerofo/builder_esp:web_p > log
        
        docker logs psesp_action
    - name: Upload output directory
        uses: actions/upload-artifact@v4
        with:
          name: output-files
          path: output
          
      - name: Get file list with basenames
        id: files
        run: |
          # 创建一个包含文件路径和文件名的JSON数组
          arr=()
          find output -type f | while IFS= read -r file; do
            filename=$(basename "$file")
            arr+=("{\"file_path\":\"$file\",\"file_name\":\"$filename\"}")
          done
          
          # 转换为JSON数组
          json_array="["
          for obj in "${arr[@]}"; do
            json_array+="$obj,"
          done
          json_array="${json_array%,}]"
          
          echo "file_list=$json_array" >> $GITHUB_OUTPUT
          
      - name: Set matrix
        id: set-matrix
        run: |
          echo "matrix=${{ steps.files.outputs.file_list }}" >> $GITHUB_OUTPUT
  upload:
    needs: container-process
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.container-process.outputs.matrix) }}
    steps:
      - name: Download output files
        uses: actions/download-artifact@v4
        with:
          name: output-files
          path: output
          
      - name: Upload single file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.file_name }}
          path: ${{ matrix.file_path }}
